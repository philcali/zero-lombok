package {{packageName}};
import java.util.Objects;

public class {{simpleName}} implements {{elementName}} {
{{#fields}}
    private {{#immutable}}final {{/immutable}}{{returnType}} {{fieldName}};

    @Override
    public {{returnType}} {{methodName}}() {
        return {{fieldName}};
    }

{{#unless immutable}}
    public void {{setterMethodName}}(final {{returnType}} {{fieldName}}) {
        this.{{fieldName}} = {{fieldName}};
    }
{{/unless}}
{{/fields}}

{{#constructors}}
{{#noArgs}}
    public {{simpleName}}() {
    }

{{/noArgs}}
{{#allArgs}}
    public {{simpleName}}(
{{#fields}}
        final {{returnType}} {{fieldName}}{{#unless @last}},{{/unless}}
{{/fields}}) {
{{#fields}}
{{#if required}}
        Objects.requireNonNull({{fieldName}}, "{{message}}");
{{/if}}
{{/fields}}
        this.{{fieldName}} = {{fieldName}};
    }
{{/allArgs}}
{{#requiredArgs}}
    public {{simpleName}}(
{{#fields}}
{{#if required}}
        final {{returnType}} {{fieldName}}{{#unless @last}},{{/unless}}
{{/if}}
{{/fields}}) {
{{#fields}}
{{#if required}}
        Objects.requireNonNull({{fieldName}}, "{{message}}");
{{/if}}
{{/fields}}
        this.{{fieldName}} = {{fieldName}};
    }
{{/requiredArgs}}
{{/constructors}}
{{#toString}}
    @Override
    public String toString() {
        return "{{simpleName}}:[{{#fields}}{{fieldName}} = " + {{fieldName}} + "{{#unless @last}}, {{/unless}}{{/fields}}]";
    }
{{/toString}}
	
{{#equalsAndHashCode}}
    @Override
    public boolean equals(final Object object) {
        if (Objects.isNull(object) || !(object instanceof {{elementName}})) {
            return false;
        }
        final {{elementName}} other = ({{elementName}}) object;
        return {{#fields}}Objects.equals({{fieldName}}, other.{{methodName}}()){{#unless @last}} && {{/unless}}{{/fields}};
    }

    @Override
    public int hashCode() {
        return Objects.hash({{#fields}}{{fieldName}}{{#unless @last}}, {{/unless}}{{/fields}});
    }
{{/equalsAndHashCode}}

{{#builder}}
    private {{simpleName}}(final Builder builder) {
{{#fields}}
        this.{{fieldName}} = builder.{{fieldName}};
{{/fields}}
    }

    public static final class Builder {
{{#fields}}
        private {{returnType}} {{fieldName}};

        public Builder {{fluentMethodName}}(final {{returnType}} {{fieldName}}) {
            this.{{fieldName}} = {{fieldName}};
            return this;
        }
{{/fields}}
        public {{elementName}} build() {
{{#fields}}{{#required}}
            Objects.requireNonNull({{fieldName}}, "{{message}}");
{{/required}}{{/fields}}
            return new {{simpleName}}(this);
        }

{{#toString}}
        @Override
        public String toString() {
            return "{{simpleName}}.Builder:[{{#fields}}{{fieldName}} = " + {{fieldName}} + "{{#unless @last}}, {{/unless}}{{/fields}}]";
        }
{{/toString}}
    }

    public static Builder builder() {
        return new Builder();
    }
{{/builder}}
}
