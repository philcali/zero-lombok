package {{packageName}};
import java.utils.Objects;

public class {{simpleName}} implements {{elementName}} {
	{{#fields}}
	private {{#immutable}}final {{/immutable}}{{returnType}} {{fieldName}};
	
	@Override
	public {{returnType}} {{methodName}}() {
		return {{fieldName}};
	}
	
	{{#unless immutable}}
	public void {{setterMethodName}}(final {{fieldName}}) {
		this.{{fieldName}} = {{fieldName}};
	}
	{{/unless}}
	{{/fields}}
	
	{{#constructors}}
	{{#noArgs}}
	public {{simpleName}}() {
	}

	{{/noArgs}}
	{{#allArgs}}
	public {{simpleName}}(
		{{#fields}}
		final {{returnType}} {{fieldName}}{{#unless @last}},{{/unless}}
		{{/fields}}) {
		{{#fields}}
		{{#if required}}
		Objects.requireNonNull({{fieldName}}, "{{message}}");
		{{/if}}
		{{/fields}}
		this.{{fieldName}} = {{fieldName}};
	}

	{{/allArgs}}
	{{requiredArgs}}
	public {{simpleName}}(
		{{#fields}}
		{{#if required}}
		final {{returnType}} {{fieldName}}{{#unless @last}},{{/unless}}
		{{/if}}
		{{/fields}}) {
		{{#fields}}
		{{#if required}}
		Objects.requireNonNull({{fieldName}}, "{{message}}");
		{{/if}}
		{{/fields}}
		this.{{fieldName}} = {{fieldName}};
	}

	{{/requiredArgs}}
	{{/constructors}}
	
	{{#toString}}
	@Override
	public String toString() {
		return "{{simpleName}}:[{{fieldsToString}}]";
	}
	{{/toString}}
	
	{{#equalsAndHashCode}}
	@Override
	public boolean equals(final Object object) {
		if (Objects.isNull(object) || !(object instanceof {{elementName}})) {
			return false;
		}
		final {{elementName}} other = ({{elementName}}) object;
		return {{fieldsEquals}};
	}
	
	@Override
	public int hashCode() {
		return Objects.hash({{fieldsHashCode}});
	}
	{{/equalsAndHashCode}}

    {{#builder}}
    private {{simpleName}}(final Builder builder) {
    	{{#fields}}
    	this.{{fieldName}} = builder.{{fieldName}};
    	{{/fields}}
    }
    
    public static final class Builder {
    	{{#fields}}
    	private {{returnType}} {{fieldName}};
    	
    	public Builder {{methodName}}(final {{fieldName}}) {
    		this.{{fieldName}} = {{fieldName}};
    		return this;
    	}
   
    	{{/fields}}
    
    	public {{elementName}} build() {
    		{{#fields}}
    		{{#required}}
    		Objects.requireNonNull({{fieldName}}, "{{message}}");
    		{{/required}}
    		{{/fields}}
    		return new {{simpleName}}(this);
    	}
    	
    	{{#toString}}
    	@Override
    	public String toString() {
    		return "{{simpleName}}.Builder:[{{fieldsToString}}]";
    	}
    	{{/toString}}
    }
    
    public static Builder builder() {
        return new Builder();
    }
    {{/builder}}
}
